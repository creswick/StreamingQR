
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'osgi'
apply plugin: 'pmd'

// Compile with and generate classes for Java 1.6
sourceCompatibility = 1.6
targetCompatibility = 1.6

// Library version
version = '1.0'

// Look for external dependencies in these repositories
repositories {
    mavenCentral()
}

configurations {
  // Configuration defines dependencies that will not be exported with QRLib jar
  notExported
  compile.extendsFrom notExported

}

// By default, Gradle includes all of the compile time dependencies at
// runtime.
dependencies {
    // Logging API
    notExported "org.slf4j:slf4j-api:1.7.7"

    // Guava library
    notExported group: 'com.google.guava', name: 'guava', version: '16.+'

    // ZXing core, i.e. the QR code library
    compile "com.google.zxing:core:2.3.0"

    // functions to export images
    testCompile "com.google.zxing:javase:2.2"

    // Junit requried to compile the unit tests
    testCompile group: 'junit', name: 'junit', version: '4.+'

    // Provide binding to logger for testing classes
    testCompile group: 'ch.qos.logback', name:'logback-classic', version:'1.1.2'
    testCompile group: 'ch.qos.logback', name:'logback-core', version:'1.1.2'
}

jar {
  manifest = osgiManifest {
    name = project.name
    classesDir = sourceSets.main.output.classesDir
    classpath = configurations.runtime
    instructionReplace 'Bundle-Name', 'QRlib: A core library for encoding and decoding streaming QR codes'
    instructionReplace 'Bundle-SymbolicName', project.name
    instruction 'Implementation-Version', version
    instruction 'Bundle-Vendor', 'http://www.galois.com'
    instruction 'Import-Package', '!com.google.zxing.*', '*'
  }

  // Add source and compilation dependencies in generated Jar
  from sourceSets.main.output
  from {
    (configurations.compile - configurations.notExported).collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
}

// TODO Prefer maven repository so transitive dependencies get resolved
uploadArchives {
    repositories {
       flatDir {
           dirs '../android/qrstreamlib/libs'
       }
    }
}

test {
    maxHeapSize = "2048m"

    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    afterTest { descriptor, result ->
       logger.lifecycle("test result: " + result + ", " + descriptor)
    }
}

// Java source code analyzer configuration
// Run 'gradle check' to invoke
pmd {
  // Available ruleSets: http://pmd.sourceforge.net/pmd-4.3.0/rules/index.html
  ruleSets = ["basic", "braces", "sunsecure" ]

}
